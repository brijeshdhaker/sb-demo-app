#
# Application Profiles.
# 
---
#
application:
  message: "Hello User!"
dummy:
  type: type-inside-the-war  
server:
  port: 8080
management:
  endpoints:
    enabled-by-default: true
    web:
      exposure:
        include: "*"
  endpoint:
    hystrix:
      stream:
        enabled: true
    info:
      enabled: true
hystrix:
  dashboard:
    proxy-stream-allow-list: "*"      
spring:
  thymeleaf:
    cache: false
  application:
    name: sample-app
logging:
  level:
    root: info
topic:
  name: users
  partitions-num: 1
  replication-factor: 1

#
---
#
# local profile
#
---
#
spring:
  profiles: local  
  application:
    name: sb-myapp
  jpa:
    hibernate:
      ddl-auto: none
      use-new-id-gnerator-mappings: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        show-sql: true
        use-sql-comments: true
        format-sql: true
        type: info
  liquibase:
    enabled: true
    change-log: classpath:db/changelog/h2/changelog.yml
#    context: h2
  datasource:
    driverClassName: org.h2.Driver  
    url: jdbc:h2:file:E:\git-repos\sb-demo-app\database\app-db;AUTO_SERVER=true;DB_CLOSE_ON_EXIT=FALSE
  h2:
    console:
      enabled: true
      path: /h2-console
  kafka:
    properties:
      bootstrap.servers: 192.168.99.105:19092
      schema.registry.url: http://192.168.99.105:8081  
    consumer:
      group-id: group_id
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        specific.avro.reader: true
        interceptor.classes: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
    producer:
      acks: all  
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      properties:
        interceptor.classes: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
    template:
      default-topic:  
   
#
---
#
#
spring:
  profiles: docker  
  application:
    name: sb-myapp
  jpa:
    hibernate:
      ddl-auto: none
      use-new-id-gnerator-mappings: false
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL5Dialect
        show-sql: true
        use-sql-comments: true
        format-sql: true
        type: info
  datasource:
    driverClassName: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://mariadb:3306/PUBLIC
    username: root
    password: p@SSW0rd
  liquibase:
    enabled: true
    change-log: classpath:db/changelog/mysql/changelog.yml
#    context: mysql
  kafka:
    properties:
      bootstrap.servers: broker:9092
      schema.registry.url: http://schema-registry:8081  
    consumer:
      group-id: group_id
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        specific.avro.reader: true
        interceptor.classes: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
    producer:
      acks: all  
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      auto.register.schemas: true
      properties:
        interceptor.classes: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
    template:
      default-topic:
      
#
---
#